PROMETHEUS:

Prometheus is an open-source monitoring system that is especially well-suited for cloud-native environments, like Kubernetes. 
It can monitor the performance of your applications and services.
it will sends an alert you if there are any issues. 
It has a powerful query language that allows you to analyze the data.
 It pulls the real-time metrics, compresses and stores  in a time-series database.
Prometheus is a standalone system, but it can also be used in conjunction with other tools like Alertmanager to send alerts based on the data it collects.
it can be integration with tools like PagerDuty to send alerts to the appropriate on-call personnel.
 it collects, and it also has a rich set of integrations with other tools and systems.
For example, you can use Prometheus to monitor the health of your Kubernetes cluster, and use its integration with Grafana to visualize the data it collects.

COMPONENTS OF PROMETHEUS:
Prometheus is a monitoring system that consists of the following components:

A main server that scrapes and stores time series data
A query language called PromQL is used to retrieve and analyze the data
A set of exporters that are used to collect metrics from various systems and applications
A set of alerting rules that can trigger notifications based on the data
An alert manager that handles the routing and suppression of alerts

GRAFANA:
Grafana is an open-source data visualization and monitoring platform that allows you to create dashboards to visualize your data and metrics. 
It is a popular choice for visualizing time series data, and it integrates with a wide range of data sources, including Prometheus, Elasticsearch, and InfluxDB.
A user-friendly interface that allows you to create and customize dashboards with panels that display your data in a variety of formats, including graphs, gauges, and tables. You can also use Grafana to set up alerts that trigger notifications when certain conditions are met.
Grafana has a rich ecosystem of plugins and integrations that extend its functionality. For example, you can use Grafana to integrate with other tools and services, such as Slack or PagerDuty, to receive alerts and notifications.
 Grafana is a powerful tool for visualizing and monitoring your data and metrics, and it is widely used in a variety of industries and contexts.

CONNECTION:
SETUP BOTH PROMETHEUS & GRAFAN FROM BELOW LINK
https://github.com/RAHAMSHAIK007/all-setups.git

pROMETHERUS: 9090
NODE EXPORTER: 9100
GRAFANA: 3000

CONNECTING PROMETHEUS TO GARAFANA:
connect to grafana dashboard -- > Data source -- > add -- > promethus -- > url of prometheus -- > save & test -- > top of page -- > explore data -- > if you want run some queries -- > top -- > import dashboard -- > 1860 -- > laod --- > prometheus -- > import 

amazon-linux-extras install epel -y
yum install strees -y


If you need dashboards for other metrics, you can import them using Grafana.

| **Dashboard Name**                   | **ID**    |
|---------------------------------------|----------|
| Node Exporter Full                   | 1860     |
| Linux Host Overview                  | 11074    |
| Kubernetes Cluster Monitoring         | 6417     |
| Docker Monitoring                     | 193      |
| Windows Server Monitoring             | 2129     |
| Windows Node Monitoring (WMI)         | 10441    |
| cAdvisor Dashboard for Docker         | 13659    |
| PostgreSQL Performance                | 9628     |
| MySQL Server Metrics                  | 7362     |
| Redis Dashboard                       | 763      |
| MongoDB Monitoring                    | 7165     |
| Nginx Monitoring                      | 10944    |
| Apache Server Dashboard               | 3894     |
| HAProxy Monitoring                    | 10585    |
| AWS EC2 Monitoring                    | 9385     |
| Azure Monitor Insights                | 14601    |
| Network Traffic Overview              | 2949     |
| SNMP Network Monitoring               | 9276     |
| Elasticsearch Cluster Monitoring      | 4358     |
| RabbitMQ Overview                     | 10991    |
| Ceph Cluster Monitoring               | 7231     |
| Zabbix Server Dashboard               | 6095     |
| Jenkins Performance Monitoring        | 11002    |

To import, go to **Grafana → Dashboards → Import** and enter the ID.


LOKI INTEGRATION:
Grafana with integration of Loki and Promtail:

apt install docker.io -y

wget https://raw.githubusercontent.com/grafana/loki/v2.8.0/cmd/loki/loki-local-config.yaml -O loki-config.yaml
wget https://raw.githubusercontent.com/grafana/loki/v2.8.0/clients/cmd/promtail/promtail-docker-config.yaml -O promtail-config.yaml
docker run --name loki -d -v $(pwd):/mnt/config -p 3100:3100 grafana/loki:2.8.0 -config.file=/mnt/config/loki-config.yaml
docker run --name promtail -d -v $(pwd):/mnt/config -v /var/log:/var/log --link loki grafana/promtail:2.8.0 -config.file=/mnt/config/promtail-config.yaml



Data Source in Grafana:
Add data source -- > loki  -- > url: http://13.233.139.224:3100 -- > save & tets

Checking logs in Loki:
Explore -- > Label filters -- > jobs=varlogs -- > run query


====================================================================================================================================


                           = Grafana =

HOME -> ALERTING -> CONTACT POINT -> Create New contact point
-> Name [ Nandeesh ] -> Integration [Email] -> Addresses [ nandeeshgm20@gmail.com ] -> test --- below process

✅ Step-by-Step: Enable Email Alerting in Grafana

✅ 1. 📦 Install Mail Transfer Agent (Postfix/Sendmail/SSMTP/Exim4)
If not already installed, install something like ssmtp or Postfix:

sudo yum install postfix -y  # RHEL-based
# or
sudo apt install postfix -y  # Debian-based

✅ 2. ✏️ Configure SMTP in grafana.ini
sudo vim /etc/grafana/grafana.ini

🔍 Find and update the [smtp] section like this:
; Note: DO NOT use your normal Gmail password
✅ Don't forget to remove the ; from each line to enable the setting.

[smtp]
enabled = true
host = smtp.gmail.com:587
user = nandeeshgm20@gmail.com
password = <your-app-password>
skip_verify = true
from_address = nandeeshgm20@gmail.com
from_name = Grafana Alerts
📌 IMPORTANT: Use Gmail App Password, not your main password. Generate one here (if 2FA is enabled):
👉 https://myaccount.google.com/apppasswords

✅ 3. 🔄 Restart Grafana
sudo systemctl restart grafana-server

✅ 4. 📤 Test Alert Email
Now go back to your Grafana UI → Alerting → Contact points, select the email (as shown in your screenshot), and click “Test”. You should receive a test email to nandeeshgm20@gmail.com.

✅ 5. Create an Alert Rule
Now that email works:
Go to Alerting → Alert Rules
Create a rule for a metric (e.g. when node_exporter's CPU usage > 80%)
Link the alert rule to the Nandeesh email contact point

Example condition:
100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[1m])) * 100) > 80




